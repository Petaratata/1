# импортируем Pandas и Numpy
import pandas as pd #библиотека для работы с большими файлами
import numpy as np  #библиотека для манипуляции с большими массивами позволяет выполнять ряд полезных функций 

df1 = pd.read_csv('train_1.csv', sep=';') #создание первого датафрейма содержащенго в себе значения файла train_1
df1                                       #вывод на экран результата

df2 = pd.read_csv('train_2.csv', sep=';')  #создание первого датафрейма содержащенго в себе значения файла train_2
df2                                        #вывод на экран результата

df = pd.merge(df1, df2) #создание общего фрейма с информацие df1 и df2
df                      #Вывод датафрейма на экран 

df.info() #Вывод информации и датафрейме

df = df.dropna() #удаление нулевых значений 
df.groupby(['MM_IN_BANK'])['AGE'].mean() #сортировка по возрасту банка в сравнении с возрастом
df.groupby(['MM_W_CARD']).mean() #сортировка по возрасту банковской карты

df = df.drop(['REG_CODE', 'PROD_TYPE'], axis=1) #удаление 2 столбцов

df.to_csv("df.csv", index=False) #сохранение датафрейма в файл формата csv

import matplotlib.pyplot as plt  #библиотека для работы с визуализацией данных

geo = df[['LOCATION_NAME','REG_CODE']]   #выделение геоданных из таблицы
geo                                      #вывод данных на экран

df['SUM_TRANS'] = df['SUM_TRANS'].apply(lambda x: str(x.replace(',','.'))) #замена запятой на точку для изменения типа данных
df['SUM_TRANS'] = df['SUM_TRANS'].astype('float64')   #замена типа данных столбца с количеством покупок

d = df.groupby(['REG_CODE'])['SUM_TRANS'].mean() #создание переменной с значениями
plt.xlabel('регион')                             #создание названия х - кординат
plt.ylabel('число покупок')                      #создание названия у - кординат
plt.scatter(d.index, d.values)                   #построение графика формата scatter

df.groupby(['AGE'])['REG_CODE','MARITAL_STATUS','MM_W_CARD','MM_IN_BANK'].mean() #создание выборки с зависимостью от возраста

d = df.groupby(['AGE'])['REG_CODE'].mean() #создание переменной с данными выборки
plt.xlabel('возраст покупателя')           #создание название х-координат
plt.ylabel('Регион')                       #создание название у-координат
plt.plot(d.index, d.values)                #создание графика формата - plot

t1 = t1.dropna()     #удаление нулевых значений  

stud = df[df['AGE'] < 25] #создане фрейма с критерием возраста меньше 25

stud = stud.sort_values(by='SUM_TRANS') #сортировка относительно количества покупок
stud           #вывод результата на экран

stud.LOCATION_NAME[688609] # вывод ячейки из столбца LOCATION_NAME и строкой номер 688609


# создание таблицы с данными плученными в результате выборки
info = {'Класс покупателя': 
            ['«студент»', 
             '«взрослый»', 
             '«пенсионер»'], 
            'Самые частопосещаемые магазины (адресс)': [
                'Milkovo ', 
                '\644046', 
                '\UFA '], 
            'Категория товаров в этих магазинах' : [
                'техники, смартфонов, ноутбуков, игр, одежды',
                'деталей для автомобиля и его обслуживания', 
                'одежды, бытовая техники'], 
            'Cайты магазинов': [
                'https://www.dns-shop.ru — техника. https://www.samsung.com/ru - телефоны. https://www.wildberries.ru - одежда и различные товары', 
                'https://xn--55-6kctygu0a.xn--p1ai - магазин автозапчастей     или   http://bgtshop.ru/contact/ - магазин товаров для автомобиля',
                'https://lagarderob.ru/Stella-Milani - магазин одежды, https://www.dns-shop.ru/ магазин бытовой техники']     
           }






info = pd.DataFrame(info) # создание фрейма с данными введенной нами таблицы
info.to_csv("info.csv", index=False) #сохранение датафрейма в файл формата csv
info                   # вывод результата на экран



from tkinter import *  
from tkinter import messagebox  

# функция, при выполнении которая, создаст окно с нужной информацией
def clicked1():  
    messagebox.showinfo('Рекомкендация к классу студент', 'Вы ' + info['Класс покупателя'][0] + ' и мы советуем вам посетить магазины '+info['Категория товаров в этих магазинах'][0] + ". Сделать заказ и узнать более подробную информацию вы можете на следующих сайтах: " + info['Cайты магазинов'][0])  
# функция, при выполнении которая, создаст окно с нужной информацией
def clicked2():  
    messagebox.showinfo('Рекомкендация к классу взрослый', 'Вы ' + info['Класс покупателя'][1] + ' и мы советуем вам посетить магазины '+info['Категория товаров в этих магазинах'][1] + ". Сделать заказ и узнать более подробную информацию вы можете на следующих сайтах: " + info['Cайты магазинов'][1]) 
# функция, при выполнении которая, создаст окно с нужной информацией
def clicked3():  
    messagebox.showinfo('Рекомкендация к классу пенсионер', 'Вы ' + info['Класс покупателя'][2] + ' и мы советуем вам посетить магазины '+info['Категория товаров в этих магазинах'][2] + ". Сделать заказ и узнать более подробную информацию вы можете на следующих сайтах: " + info['Cайты магазинов'][2]) 
  
  
window = Tk()  #создание окна
window.title("Добро пожаловать в приложение помощник по покупкам") #название окна 
window.geometry('276x175') # задача графических параметров приложения
window.eval('tk::PlaceWindow . center') # смещение программы на центр

lbl1 = Label(window, text="")   # создание отступа
lbl1.grid(column=2, row=0)      # указание размеров отступа
lbl = Label(window, text="Выберите свой возраст")  #создание надписи 
lbl.grid(column=2, row=2)       # указание размеров и положения надписи
lbl1 = Label(window, text="")   #создание отступа
lbl1.grid(column=2, row=3)      #указание размеров отступа

btn1 = Button(window, text='Меньше 25', command=clicked1)  #создание кнопки выполняющей функцию
btn1.grid(column=1, row=10)                                #указание положения кнопки

btn2 = Button(window, text='От 25 и до 65', command=clicked2)  #создание кнопки выполняющей функцию
btn2.grid(column=2, row=10)                                    #указание положения кнопки
 
btn3 = Button(window, text='Больше 65', command=clicked3)   #создание кнопки выполняющей функцию
btn3.grid(column=3, row=10)                                 #указание положения кнопки


window.mainloop() # закрытие программы