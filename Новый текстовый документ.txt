[Пересланное сообщение]
  Данил Малых, 23 марта в 14:36
  from tkinter import * 
  from tkinter import messagebox 
   
  def ladno(): 
   if 1 <= int(txt.get()) and int(txt.get())<=10: 
   lbl.configure(text=df['Номер']) 
   elif txt.get() == '': 
   lbl.configure(text='') 
   else: 
   res = "Привет " + txt.get() 
   lbl.configure(text=res) 
   
   
   
  window = Tk() 
  window.title("Крутое задание") 
  window.geometry('500x350') 
  window.eval('tk::PlaceWindow . center') 
   
   
   
  lbl = Label(window, text="Напиши крутую цифру от 1 до 3") 
  lbl.grid(column=0, row=0) 
   
  txt = Entry(window, width=10) 
  txt.grid(column=0, row=2) 
   
  btn1 = Button(window, text="Клик!", command=ladno) 
  btn1.grid(column=0, row=3) 
   
  window.mainloop()






import json
import os
files = os.listdir("путь до папки")


for file in files:
____print(file) 
____with open(os.getcwd() + "путь до папки" + file) as file_context:
________parsed_file = ujson.load(file_context) 


for i in files:
    команда которая конвертирует джсон в цсв(i)
    сохранение

обьединение полученных таблиц






1) Описать атрибуты используемых выборок, можно вкраце

====-если совпадет с заданием-====
3 сессия - визуализация зависимостей, шт 3. желательно
Просто построить графики определенных зависимостей, ОБЬЯСНИТЬ какие атрибуты от чего зависят
ОБЯЗАТЕЛЬНО сделать вывод, можно маленький
По этим выборкам потом будете делать бота, так что подобрать более подходящую, можно одну


4 сессия - приложение. если время будет то через tkinter, если нет то вторым способом
обязательно будут смотреть чтобы пользователь мог вводить данные, так что поле с текстом надо 100%
Нужно чтобы приложение брало некие данные из таблицы и выводило их. Даже если таблицы нету, создать таблицу запихать в неё инфу и выводить из неё.
Не забыть инструкцию для пользователя



# импортируем Pandas и Numpy
import pandas as pd #библиотека для работы с большими файлами
import numpy as np  #библиотека для манипуляции с большими массивами позволяет выполнять ряд полезных функций 

df1 = pd.read_csv('train_1.csv', sep=';') #создание первого датафрейма содержащенго в себе значения файла train_1
df1                                       #вывод на экран результата

df2 = pd.read_csv('train_2.csv', sep=';')  #создание первого датафрейма содержащенго в себе значения файла train_2
df2                                        #вывод на экран результата

df = pd.merge(df1, df2) #создание общего фрейма с информацие df1 и df2
df                      #Вывод датафрейма на экран 

df.info() #Вывод информации и датафрейме

df = df.dropna() #удаление нулевых значений 

#один из способов заменить тип данных на численный
df["Столбик который меняем"] = pd.to_numeric(df["Столбик который меняем"], errors="coerce", downcast=None)
errors = ‘coerce’ - заменит неподходящие на нулевое значение\ ‘ignore’ - проигнорирует  \  ‘raise’ - сделает исключение


df.groupby(['MM_IN_BANK'])['AGE'].mean() #сортировка по возрасту банка в сравнении с возрастом
df.groupby(['MM_W_CARD']).mean() #сортировка по возрасту банковской карты

df = df.drop(['столбик1', 'столбик2'], axis=1) #удаление 2 столбцов

df.to_csv("df.csv", index=False) #сохранение датафрейма в файл формата csv

import matplotlib.pyplot as plt  #библиотека для работы с визуализацией данных
geo = df[['LOCATION_NAME','REG_CODE']]   #выделение геоданных из таблицы
geo                                      #вывод данных на экран

df['SUM_TRANS'] = df['SUM_TRANS'].apply(lambda x: str(x.replace(',','.'))) #замена запятой на точку для изменения типа данных
df['SUM_TRANS'] = df['SUM_TRANS'].astype('float64')   #замена типа данных столбца с количеством покупок

d = df.groupby(['REG_CODE'])['SUM_TRANS'].mean() #создание переменной с значениями
plt.xlabel('регион')                             #создание названия х - кординат
plt.ylabel('число покупок')                      #создание названия у - кординат
plt.scatter(d.index, d.values)                   #построение графика формата scatter

df.groupby(['AGE'])['REG_CODE','MARITAL_STATUS','MM_W_CARD','MM_IN_BANK'].mean() #создание выборки с зависимостью от возраста

d = df.groupby(['AGE'])['REG_CODE'].mean() #создание переменной с данными выборки
plt.xlabel('возраст покупателя')           #создание название х-координат
plt.ylabel('Регион')                       #создание название у-координат
plt.plot(d.index, d.values)                #создание графика формата - plot

t1 = t1.dropna()     #удаление нулевых значений  

stud = df[df['AGE'] < 25] #создане фрейма с критерием возраста меньше 25

stud = stud.sort_values(by='SUM_TRANS') #сортировка относительно количества покупок
stud           #вывод результата на экран

stud.LOCATION_NAME[688609] # вывод ячейки из столбца LOCATION_NAME и строкой номер 688609


===================================================================================
# создание таблицы с данными
info = {'Класс покупателя': 
            ['«студент»', 
             '«взрослый»', 
             '«пенсионер»'], 
            'Самые частопосещаемые магазины (адресс)': [
                'Milkovo ', 
                '\644046', 
                '\UFA '], 
            'Категория товаров в этих магазинах' : [
                'техники, смартфонов, ноутбуков, игр, одежды',
                'деталей для автомобиля и его обслуживания', 
                'одежды, бытовая техники'], 
            'Cайты магазинов': [
                'https://www.dns-shop.ru — техника. https://www.samsung.com/ru - телефоны. https://www.wildberries.ru - одежда и различные товары', 
                'https://xn--55-6kctygu0a.xn--p1ai - магазин автозапчастей     или   http://bgtshop.ru/contact/ - магазин товаров для автомобиля',
                'https://lagarderob.ru/Stella-Milani - магазин одежды, https://www.dns-shop.ru/ магазин бытовой техники']     
           }


info = pd.DataFrame(info) # создание фрейма с данными введенной нами таблицы
info.to_csv("info.csv", index=False) #сохранение датафрейма в файл формата csv

===============================================================================================================
4 сессия

https://pythonru.com/uroki/obuchenie-python-gui-uroki-po-tkinter - сайт с примерами

#подгрузка библиотек
from tkinter import *
from tkinter import messagebox

#функция при нажатии
def clicked():
    #условие, с его помощью можно сделать разные выводы
    if txt.get() == 'asd': #txt.get() то что введено в формк
        res = "Привет" + txt.get()
        lbl.configure(text=res) # изменение текста формы
    else:
        res = "Прияо"
        lbl.configure(text=res)


#функция при нажатии
def clicked_now():
    messagebox.showinfo("Название окна" , "Текст окна" + txt.get()) # вывод информации в окне


window = Tk() #создание окна
window.title("Добро пожаловать в приложение PythonRu") #название окна
window.geometry('400x250') #размер окна
window.eval('tk::PlaceWindow . center') #смещение программы на центр


lbl = Label(window, text="Привет") #создание надписи
lbl.grid(column=0, row=0) #расположение надписи

#создание формы с вводом вручную
txt = Entry(window, width=10)
#расположение формы
txt.grid(column=1, row=0)

#кнопка 1
btn1 = Button(window, text="Клик!", command=clicked) #command - название функции, которая будет выполняться
#расположение кнопки
btn1.grid(column=2, row=0)

#кнопка2
btn2 = Button(window, text="Вывод", command=clicked_now)
btn2.grid(column=3, row=1)

#закрытие программы
window.mainloop()
